/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package qlsv.register.view;

import qlsv.register.dao.StudentDao;
import qlsv.register.dao.SubjectDao;
import qlsv.register.entity.Student;
import qlsv.register.entity.Subject;

import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MAY 09
 */
public final class StatisticsView extends javax.swing.JFrame {
    private final String[] columnNamesOfStudent = new String[] {
        "Mã sinh viên", "Tên sinh viên", "Trạng thái", "Số TC tích lũy"
    };
    private final String[] columnNamesOfSubject = new String[] {
        "Mã lớp", "Tên học phần", "Giảng viên",  "Số sinh viên đã đăng kí", "Trạng thái"
    };
    private final StudentDao studentDao;
    private final SubjectDao subjectDao;
    
    
    public StatisticsView() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Thống kê");
        ImageIcon icon = new ImageIcon("logo\\logo.png");
//        ImageIcon icon = new ImageIcon("src\\main\\resources\\img\\logo.png");
        setIconImage(icon.getImage());
        
        studentDao = new StudentDao();
        subjectDao = new SubjectDao();
        
        showListStudents(studentDao.getListStudents());
        showListSubjects(subjectDao.getListSubjects());
        
        //Student table
        Label1.setText("Tổng số: " + studentDao.getListStudents().size() + " sinh viên, trong đó:");
        LabelRegisterStudent.setText("" + showSumOfRegistedStudent(studentDao.getListStudents()) + " sinh viên đã đăng ký môn. (Chiếm " + (double) Math.round((double)showSumOfRegistedStudent(studentDao.getListStudents())/(double)studentDao.getListStudents().size() * 10000)/100 + " %)");
        LabelUnregisterStudent.setText((studentDao.getListStudents().size() - showSumOfRegistedStudent(studentDao.getListStudents())) + " sinh viên chưa đăng ký môn. (Chiếm " + (double) Math.round((double)(studentDao.getListStudents().size() - showSumOfRegistedStudent(studentDao.getListStudents()))/(studentDao.getListStudents().size()) * 10000)/100 + " %)");
        Label2.setText("Sinh viên " + showMaxCreditStudent(studentDao.getListStudents()).getName() + ", chuyên ngành " + showMaxCreditStudent(studentDao.getListStudents()).getMajor() + ", tích lũy được nhiều TC nhất.");
        LabelAverageCreditPerStudent.setText ("Trung bình mỗi sinh viên đăng ký " + (double) Math.round((double)showSumOfCredit(studentDao.getListStudents())/(double)studentDao.getListStudents().size() * 100)/100 + " học phần.");
        
        //Subject Table
        Label3.setText("Tổng số: " + showSumOfSubject(subjectDao.getListSubjects()) + " môn học, " + subjectDao.getListSubjects().size() + " lớp, trong đó:");
        LabelMaxClassOfSubject.setText("Môn học có nhiều lớp nhất: " + showMaxOfClassSubject(subjectDao.getListSubjects()) + ".");
        LabelMaxOfStudentOfSubject.setText("Môn học có nhiều sinh viên đăng ký nhất: " + showMaxOfRegistedStudentSubject(subjectDao.getListSubjects()) + ".");
        LabelSumOfFullClass.setText(showSumOfFullClass(subjectDao.getListSubjects()) + " lớp đã đầy. " + "(Chiếm " + (double) Math.round((double)showSumOfFullClass(subjectDao.getListSubjects())/(double)subjectDao.getListSubjects().size() * 10000)/100 + " %)");
        LabelSumOfEmptyClass.setText(showSumOfEmptyClass(subjectDao.getListSubjects()) + " lớp còn trống. " + "(Chiếm " + (double) Math.round((100 - ((double)showSumOfFullClass(subjectDao.getListSubjects())/(double)subjectDao.getListSubjects().size() * 100)) * 100)/100 + " %)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Label1 = new javax.swing.JLabel();
        LabelRegisterStudent = new javax.swing.JLabel();
        LabelUnregisterStudent = new javax.swing.JLabel();
        Label2 = new javax.swing.JLabel();
        LabelAverageCreditPerStudent = new javax.swing.JLabel();
        LabelStatisticStudentTable = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        StudentTableStatistics = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        Label3 = new javax.swing.JLabel();
        LabelSumOfFullClass = new javax.swing.JLabel();
        LabelSumOfEmptyClass = new javax.swing.JLabel();
        LabelMaxClassOfSubject = new javax.swing.JLabel();
        LabelMaxOfStudentOfSubject = new javax.swing.JLabel();
        LabelStatisticSubjectTable = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SubjectTableStatistics = new javax.swing.JTable();
        ButtonReturn = new button.MyButton();
        ButtonPrintListStudent = new button.MyButton();
        ButtonPrintListSubject = new button.MyButton();
        ButtonChart = new button.MyButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1440, 810));

        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(660, 633));

        Label1.setForeground(new java.awt.Color(255, 255, 255));

        LabelRegisterStudent.setForeground(new java.awt.Color(255, 255, 255));

        LabelUnregisterStudent.setForeground(new java.awt.Color(255, 255, 255));

        Label2.setForeground(new java.awt.Color(255, 255, 255));

        LabelAverageCreditPerStudent.setForeground(new java.awt.Color(255, 255, 255));

        LabelStatisticStudentTable.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        LabelStatisticStudentTable.setForeground(new java.awt.Color(255, 255, 255));
        LabelStatisticStudentTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelStatisticStudentTable.setText("BẢNG THỐNG KÊ SINH VIÊN");

        StudentTableStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Trạng thái", "Số TC tích lũy"
            }
        ));
        jScrollPane1.setViewportView(StudentTableStatistics);
        if (StudentTableStatistics.getColumnModel().getColumnCount() > 0) {
            StudentTableStatistics.getColumnModel().getColumn(0).setMinWidth(200);
            StudentTableStatistics.getColumnModel().getColumn(0).setPreferredWidth(200);
            StudentTableStatistics.getColumnModel().getColumn(0).setMaxWidth(200);
            StudentTableStatistics.getColumnModel().getColumn(2).setMinWidth(80);
            StudentTableStatistics.getColumnModel().getColumn(2).setPreferredWidth(80);
            StudentTableStatistics.getColumnModel().getColumn(2).setMaxWidth(80);
            StudentTableStatistics.getColumnModel().getColumn(3).setMinWidth(90);
            StudentTableStatistics.getColumnModel().getColumn(3).setPreferredWidth(90);
            StudentTableStatistics.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LabelUnregisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(LabelAverageCreditPerStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(LabelStatisticStudentTable))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelStatisticStudentTable, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelUnregisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelAverageCreditPerStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(660, 633));

        Label3.setForeground(new java.awt.Color(255, 255, 255));

        LabelSumOfFullClass.setForeground(new java.awt.Color(255, 255, 255));

        LabelSumOfEmptyClass.setForeground(new java.awt.Color(255, 255, 255));

        LabelMaxClassOfSubject.setForeground(new java.awt.Color(255, 255, 255));

        LabelMaxOfStudentOfSubject.setForeground(new java.awt.Color(255, 255, 255));

        LabelStatisticSubjectTable.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        LabelStatisticSubjectTable.setForeground(new java.awt.Color(255, 255, 255));
        LabelStatisticSubjectTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelStatisticSubjectTable.setText("BẢNG THỐNG KÊ HỌC PHẦN");

        SubjectTableStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã lớp", "Tên học phần", "Giảng viên", "Số sinh viên đã đăng ký", "Trạng thái"
            }
        ));
        jScrollPane3.setViewportView(SubjectTableStatistics);
        if (SubjectTableStatistics.getColumnModel().getColumnCount() > 0) {
            SubjectTableStatistics.getColumnModel().getColumn(0).setMinWidth(70);
            SubjectTableStatistics.getColumnModel().getColumn(0).setPreferredWidth(70);
            SubjectTableStatistics.getColumnModel().getColumn(0).setMaxWidth(70);
            SubjectTableStatistics.getColumnModel().getColumn(3).setMinWidth(150);
            SubjectTableStatistics.getColumnModel().getColumn(3).setPreferredWidth(150);
            SubjectTableStatistics.getColumnModel().getColumn(3).setMaxWidth(150);
            SubjectTableStatistics.getColumnModel().getColumn(4).setMinWidth(70);
            SubjectTableStatistics.getColumnModel().getColumn(4).setPreferredWidth(70);
            SubjectTableStatistics.getColumnModel().getColumn(4).setMaxWidth(70);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(LabelStatisticSubjectTable))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(LabelMaxClassOfSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LabelMaxOfStudentOfSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(Label3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LabelSumOfEmptyClass, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .addComponent(LabelSumOfFullClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelStatisticSubjectTable, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelSumOfFullClass, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelSumOfEmptyClass, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelMaxClassOfSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelMaxOfStudentOfSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ButtonReturn.setBorder(null);
        ButtonReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/OIP__3_-removebg-preview.png"))); // NOI18N
        ButtonReturn.setBorderColor(new java.awt.Color(204, 204, 204));
        ButtonReturn.setColorClick(new java.awt.Color(0, 0, 0));
        ButtonReturn.setColorOver(new java.awt.Color(204, 204, 204));
        ButtonReturn.setRadius(25);

        ButtonPrintListStudent.setBorder(null);
        ButtonPrintListStudent.setText("In danh sách sinh viên");
        ButtonPrintListStudent.setRadius(20);

        ButtonPrintListSubject.setBorder(null);
        ButtonPrintListSubject.setText("In danh sách học phần");
        ButtonPrintListSubject.setRadius(20);

        ButtonChart.setBorder(null);
        ButtonChart.setText("Biểu đồ thống kê");
        ButtonChart.setRadius(20);
        ButtonChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ButtonChart, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonPrintListStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ButtonPrintListSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonPrintListStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonPrintListSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonChart, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/StatisticsBackGround.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonChartActionPerformed
        ChartView chartView = new ChartView();
        chartView.DataProcessing(subjectDao.getListSubjects());
    }//GEN-LAST:event_ButtonChartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.MyButton ButtonChart;
    private button.MyButton ButtonPrintListStudent;
    private button.MyButton ButtonPrintListSubject;
    private button.MyButton ButtonReturn;
    private javax.swing.JLabel Label1;
    private javax.swing.JLabel Label2;
    private javax.swing.JLabel Label3;
    private javax.swing.JLabel LabelAverageCreditPerStudent;
    private javax.swing.JLabel LabelMaxClassOfSubject;
    private javax.swing.JLabel LabelMaxOfStudentOfSubject;
    private javax.swing.JLabel LabelRegisterStudent;
    private javax.swing.JLabel LabelStatisticStudentTable;
    private javax.swing.JLabel LabelStatisticSubjectTable;
    private javax.swing.JLabel LabelSumOfEmptyClass;
    private javax.swing.JLabel LabelSumOfFullClass;
    private javax.swing.JLabel LabelUnregisterStudent;
    private javax.swing.JTable StudentTableStatistics;
    private javax.swing.JTable SubjectTableStatistics;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
    
    public void addReturnListener(ActionListener listener) {
        ButtonReturn.addActionListener(listener);
    }
    
    public void addPrintListStudentListener(ActionListener listener) {
        ButtonPrintListStudent.addActionListener(listener);
    }
    
    public void addPrintListSubjectListener(ActionListener listener) {
        ButtonPrintListSubject.addActionListener(listener);
    }
    
    private void showListStudents(List<Student> list) {
        int size = list.size();
        // với bảng studentTable có 4 cột, 
        // khởi tạo mảng 2 chiều student, trong đó:
        // số hàng: là kích thước của list student 
        // số cột: là 4
        Object [][] students = new Object[size][4];
        for (int i = 0; i < size; i++) {
            students[i][0] = list.get(i).getID();
            students[i][1] = list.get(i).getName();
            if (list.get(i).getRegistedCredit() != 0){
                students[i][2] = "Đã đăng ký";
            }
            else {
                students[i][2] = "Chưa đăng ký";
            }
            students[i][3] = list.get(i).getRegistedCredit();
        }
        StudentTableStatistics.setModel(new DefaultTableModel((Object[][])students, columnNamesOfStudent));
        StudentTableStatistics.getColumnModel().getColumn(0).setMaxWidth(200);
        StudentTableStatistics.getColumnModel().getColumn(0).setMinWidth(200);
        StudentTableStatistics.getColumnModel().getColumn(2).setMaxWidth(80);
        StudentTableStatistics.getColumnModel().getColumn(2).setMinWidth(80);
        StudentTableStatistics.getColumnModel().getColumn(3).setMaxWidth(90);
        StudentTableStatistics.getColumnModel().getColumn(3).setMinWidth(90);
    }
    
    private void showListSubjects(List<Subject> list) {
        int size;
        if (list.isEmpty()) size = 0; 
        else size = list.size();
        // với bảng subjectTable có 5 cột, 
        // khởi tạo mảng 2 chiều subjects, trong đó:
        // số hàng: là kích thước của list subject 
        // số cột: là 5
        Object [][] subjects = new Object[size][5];
        for (int i = 0; i < size; i++) {
            subjects[i][0] = list.get(i).getIDclass();
            subjects[i][1] = list.get(i).getName();
            subjects[i][2] = list.get(i).getTeacher();
            subjects[i][3] = list.get(i).getRegistedStudent();
            if (list.get(i).getRegistedStudent() >= list.get(i).getQuantity()){
                subjects[i][4] = "Đầy";
            } else {
                subjects[i][4] = "Trống";
            }
        }
       SubjectTableStatistics.setModel(new DefaultTableModel((Object[][])subjects, columnNamesOfSubject));
       SubjectTableStatistics.getColumnModel().getColumn(0).setMaxWidth(80);
       SubjectTableStatistics.getColumnModel().getColumn(0).setMinWidth(80);
       SubjectTableStatistics.getColumnModel().getColumn(3).setMaxWidth(150);
       SubjectTableStatistics.getColumnModel().getColumn(3).setMinWidth(150);
       SubjectTableStatistics.getColumnModel().getColumn(4).setMaxWidth(70);
       SubjectTableStatistics.getColumnModel().getColumn(4).setMinWidth(70);
   }

    public int showSumOfRegistedStudent (List<Student> list){
        int size, count = 0;

        if (list == null) size = 0; 
        else size = list.size();

        for (int i = 0; i < size; i++){
            if (list.get(i).getRegistedCredit() != 0){
                count ++;
            }
        }
        return count;
    }

    public int showSumOfCredit ( List<Student> list){
        int size, count = 0;

        if (list == null) size = 0;
        else size = list.size();

        for (int i = 0; i < size; i++){
            count += list.get(i).getRegistedCredit();
        }
        return count;
    }

    public int showMaxcredit (List<Student> list) {
        int max = 0 ;

        for (int i = 0; i < list.size(); i++){
            if (list.get(i).getRegistedCredit() > max){
                max = list.get(i).getRegistedCredit();
            }
        }
        return max;   
    }


    public Student showMaxCreditStudent (List <Student> list){
        int i;

        for (i = 0; i < list.size(); i++){
           if (list.get(i).getRegistedCredit() == showMaxcredit(list)){
               break;   
           }
        }
        return list.get(i);
    }

    public int showSumOfSubject (List<Subject> list){
        Set<String> set = new HashSet<>();
        for (int i = 0; i < list.size(); i++){
            set.add(list.get(i).getName());
        }
        return set.size();
    }

    public String showMaxOfClassSubject (List <Subject> list){
        Map<String, Integer> classCountMap = new HashMap<>();

        for (Subject s : list){
            classCountMap.put(s.getName(),classCountMap.getOrDefault(s.getName(), 0) + 1);            
        }
        int maxCount = 0;
        String maxClass = null;

        for (Map.Entry<String, Integer> entry : classCountMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxClass = entry.getKey();
            }
        }
        return maxClass;
     }

    public String showMaxOfRegistedStudentSubject (List <Subject> list){
        Map<String, Integer> studentCountMap = new HashMap<>();

        for (Subject s : list){
            studentCountMap.put(s.getName(),studentCountMap.getOrDefault(s.getName(), 0) + s.getRegistedStudent());            
        }

        int maxCount = 0;
        String maxClass = null;

        for (Map.Entry<String, Integer> entry : studentCountMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxClass = entry.getKey();
            }
        }
        return maxClass;
     }

    public int showSumOfFullClass (List <Subject> list) {
        int countSubject = 0;
        for (Subject s : list){
            if (s.getRegistedStudent() == s.getQuantity()){
                countSubject ++;
            }
        }
        return countSubject;
    }
    
    public int showSumOfEmptyClass (List <Subject> list) {
        int countSubject = 0;
        for (Subject s : list){
            if (s.getRegistedStudent() < s.getQuantity()){
                countSubject ++;
            }
        }
        return countSubject;
    }
}
